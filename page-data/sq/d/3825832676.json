{"data":{"projects":{"edges":[{"node":{"frontmatter":{"title":"GraphQL Client for Marvel Authors and Books","tech":["React or Next.js","Apollo Client","GraphQL","Material-UI"],"github":null,"external":"https://github.com/sachindevangan/-GraphQL-Client-for-Marvel-Authors-and-Books"},"html":"<p>A GraphQL client application built using either React or Next.js that connects to a GraphQL server for\nquerying and managing authors and books. The application utilizes Apollo Client for managing GraphQL queries and\nmutations, including creating, updating, and deleting authors and books, with additional functionality for searching\nbooks by genre, price range, and authors by name. Material-UI is used for UI components.</p>"}},{"node":{"frontmatter":{"title":"Marvel Comic Collecting Application","tech":["React","Redux","Express","Redis","Axios","Material-UI"],"github":null,"external":"https://github.com/sachindevangan/Marvel-Comic-Collecting-Application"},"html":"<p>A Marvel Comic collecting application that integrates Express, Redis, and Redux or Context API. It features\ncaching via Redis for optimized API calls, state management through Redux or Context API, and allows users\nto browse and manage collections of Marvel comics from the Marvel API. The app includes a paginated listing\nof comics, detailed views, collection management, and supports adding/removing comics in various sub-collections.</p>"}},{"node":{"frontmatter":{"title":"Metropolitan Museum of Art API React SPA","tech":["React","Vite","React Router 6","Axios","Material-UI"],"github":null,"external":"https://github.com/sachindevangan/Metropolitan-Museum-of-Art-API-React-SPA"},"html":"<p>A React-based Single Page Application (SPA) using the Metropolitan Museum of Art API. This project integrates pagination, routing, and data fetching with Axios, displaying artwork details from the museum's collection. The application supports navigating through a collection of art pieces, viewing individual item details, and optionally, searching for specific artwork. Material-UI is used to enhance the UI, and async/await is implemented for optimized data handling.</p>"}},{"node":{"frontmatter":{"title":"GraphQL Server with Apollo, Redis, and MongoDB","tech":["Node.js","Apollo Server","GraphQL","Redis","MongoDB"],"github":null,"external":"https://github.com/sachindevangan/GraphQL-Server-with-Apollo-Redis-and-MongoDB"},"html":"<p>A GraphQL API project using Apollo Server, Redis, and MongoDB to manage and cache data for authors and books. The server supports a variety of queries and mutations, including data retrieval, addition, and modification, with Redis caching to optimize response time and minimize database load. The API establishes data relationships between authors and books, providing nested data queries and computed fields for enriched data handling.</p>"}},{"node":{"frontmatter":{"title":"Marvel API with Redis Caching","tech":["Node.js","Express.js","Redis","REST API"],"github":null,"external":"https://github.com/sachindevangan/Marvel-API-with-Redis-Caching"},"html":"<p>A Marvel API project that demonstrates usage of Redis caching in an Express.js server. The project allows users to retrieve character, comic, and story data from the Marvel API with efficient caching to optimize repeated queries. Utilizing asynchronous operations, the server checks Redis for cached data before making external API requests, minimizing API calls and improving response time.</p>"}},{"node":{"frontmatter":{"title":"Authentication and Middleware","tech":["Node.js","Express.js","bcrypt","express-session"],"github":null,"external":"https://github.com/sachindevangan/Authentication-and-Middleware"},"html":"<p>This project involves creating a secure authentication system with Express.js, implementing user sign-up and login features. It includes password hashing, role-based access control, and session management using express-session. A logging middleware is also incorporated to track requests and their status. The project emphasizes client-side and server-side validation, error handling, and user role restrictions across various routes.</p>"}},{"node":{"frontmatter":{"title":"Client-Side Text Analyzer","tech":["HTML","CSS","JavaScript","Express.js"],"github":null,"external":"https://github.com/sachindevangan/Text-Analyzer/tree/main"},"html":"<p>This project focuses on a client-side text analysis application built with HTML, CSS, and JavaScript. It runs entirely in the browser and provides various text statistics, leveraging an Express server solely to serve the HTML page and assets. Core functionality includes transforming user-entered text into lowercase and calculating multiple metrics such as letter count, vowel count, word count, and more. Each calculation dynamically updates on the page without server processing.</p>"}},{"node":{"frontmatter":{"title":"Ticketmaster API Application","tech":["HTML","CSS","JavaScript","Handlebars","Axios"],"github":null,"external":"https://github.com/sachindevangan/Ticketmaster-API-Application"},"html":"<p>A web application that interacts with the Ticketmaster API to display venue information based on user searches. This project demonstrates templating with Handlebars and dynamic rendering of HTML content from API data. Features include search forms, venue lists, and detailed venue pages, all styled with custom CSS. Implements error handling, input validation, and asynchronous operations using Axios.</p>"}},{"node":{"frontmatter":{"title":"A Band API","tech":["Node.js","Express","MongoDB","REST API"],"github":null,"external":"https://github.com/sachindevangan/A-Band_API"},"html":"<p>A RESTful API project that provides CRUD operations to manage data for music bands and their albums, implementing MongoDB for data persistence. Organized using modular programming practices, this API separates database management, data manipulation, and routing. Built with complete error handling and input validation, it leverages asynchronous programming to efficiently handle database operations.</p>"}},{"node":{"frontmatter":{"title":"Async Programming with Node.js","tech":["Node.js","Axios","Async/Await"],"github":"","external":"https://github.com/sachindevangan/Async-Programming-with-Node.js"},"html":"<p>This project introduces async programming with Node.js, focusing on using async/await syntax and error\nhandling in JavaScript functions. The lab includes downloading data via Axios from remote JSON\nsources and requires modular design with reusable functions.</p>"}},{"node":{"frontmatter":{"title":"JavaScript Utility Functions with Node.js","tech":["JavaScript","Node.js"],"github":null,"external":"https://github.com/sachindevangan/JavaScript-Utility-Functions-with-Node.js"},"html":"<p>A set of utility functions implemented in JavaScript, organized in modules for arrays, strings, and objects.\nEach function has strict error handling and validation. Includes testing with both passing and failing cases for\neach function in an app.js file. Functions include array sorting and filtering, merging, and matrix multiplication,\nas well as string and object utilities such as palindrome checking, word censoring, object equality checking, and more.</p>"}}]}}}